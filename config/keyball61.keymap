#define DEFAULT 0
#define SYM     1
#define FUN     2
#define MOUSE   3
#define SCROLL  4
#define SNIPE   5

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// マウスキーを押したらタイムアウトを延長（ドラッグやダブルクリックを考慮 1秒）

&mkp_input_listener { input-processors = <&zip_temp_layer 1 1000>; };

&lt {
    tapping-term-ms = <185>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <175>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        eisu {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <28 27>;
            layers = <0 1>;
        };

        kana {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <31 32>;
            layers = <0 1>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <40 39>;
            layers = <0>;
        };

        period {
            bindings = <&kp PERIOD>;
            key-positions = <45 46>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <28 31>;
            layers = <0>;
        };

        thumb_homes {
            bindings = <&kp LC(TAB)>;
            key-positions = <52 55>;
            layers = <0>;
        };

        close {
            bindings = <&kp RC(W)>;
            key-positions = <16 15 14>;
        };

        reload {
            bindings = <&kp RC(R)>;
            key-positions = <16 15>;
        };

        prev_tab_f16 {
            bindings = <&kp F16>;
            key-positions = <26 27>;
        };

        next_tab_f17 {
            bindings = <&kp F17>;
            key-positions = <33 32>;
        };

        mb4 {
            bindings = <&mkp MB4>;
            key-positions = <14 15>;
        };

        mb5 {
            bindings = <&mkp MB5>;
            key-positions = <20 21>;
        };
    };

    behaviors {
        slash_pipe_backslash: slash_pipe_backslash {
            compatible = "zmk,behavior-tap-dance";
            label = "SLASH_PIPE_BACKSLASH";
            #binding-cells = <0>;
            bindings = <&mt PIPE SLASH>, <&mt BACKSLASH SLASH>;

            tapping-term-ms = <175>;
        };

        copy_paste_save_cut: copy_paste_save_cut {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_PASTE_SAVE_CUT";
            #binding-cells = <0>;
            bindings = <&mt LC(S) LC(C)>, <&mt LC(X) LC(V)>;

            tapping-term-ms = <165>;
        };

        mod_undo_redo: mod_undo_redo {
            compatible = "zmk,behavior-tap-dance";
            label = "MOD_UNDO_REDO";
            #binding-cells = <0>;
            bindings = <&mt LEFT_SHIFT LC(Z)>, <&kp LC(LS(Z))>;

            tapping-term-ms = <170>;
        };

        hyphen_underscore_tilda_equal: hyphen_underscore_tilda_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "HYPHEN_UNDERSCORE_TILDA_EQUAL";
            #binding-cells = <0>;
            bindings = <&mt UNDERSCORE MINUS>, <&mt EQUAL TILDE>;

            tapping-term-ms = <175>;
        };

        kakkos: kakkos {
            compatible = "zmk,behavior-tap-dance";
            label = "KAKKOS";
            #binding-cells = <0>;
            bindings =
                <&mt LEFT_BRACE LEFT_PARENTHESIS>,
                <&mt LESS_THAN LEFT_BRACKET>;
        };

        colon_semicolon: colon_semicolon {
            compatible = "zmk,behavior-tap-dance";
            label = "COLON_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            tapping-term-ms = <175>;
        };

        quotations_number: quotations_number {
            compatible = "zmk,behavior-tap-dance";
            label = "QUOTATIONS_NUMBER";
            #binding-cells = <0>;
            bindings = <&lt 3 SINGLE_QUOTE>, <&mt GRAVE DOUBLE_QUOTES>;

            tapping-term-ms = <175>;
        };

        lang_mod: lang_mod {
            compatible = "zmk,behavior-tap-dance";
            label = "LANG_MOD";
            #binding-cells = <0>;
            bindings = <&lt 3 LANGUAGE_2>, <&kp LANGUAGE_1>;

            tapping-term-ms = <170>;
        };

        kakko_tojirus: kakko_tojirus {
            compatible = "zmk,behavior-tap-dance";
            label = "KAKKO_TOJIRUS";
            #binding-cells = <0>;
            bindings =
                <&mt RIGHT_BRACE RIGHT_PARENTHESIS>,
                <&mt GREATER_THAN RIGHT_BRACKET>;

            tapping-term-ms = <180>;
        };

        editor_2D_selectio: editor_2D_selectio {
            compatible = "zmk,behavior-tap-dance";
            label = "EDITOR_2D_SELECTIO";
            #binding-cells = <0>;
            bindings = <&mt LC(D) L>, <&mt LC(A) M>;

            tapping-term-ms = <175>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&tog 7               &mt EXCLAMATION NUMBER_1  &mt AT NUMBER_2  &mt HASH NUMBER_3  &mt DOLLAR N5  &mt PERCENT NUMBER_6                                                                                &mt CARET N7              &mt AMPERSAND N8  &mt ASTERISK N9  &tog 2     &tog 3          &kp DELETE
&mt DELETE ESCAPE    &kp Q                     &kp L            &kp U              &kp F          &mt SEMI COLON                                                                                      &mt QUESTION EXCLAMATION  &kp W             &kp R            &kp Y      &mt PLUS EQUAL  &mt LG(H) PRINTSCREEN
&mt LC(X) LC(C)      &kp E                     &kp I            &kp A              &kp O          &hyphen_underscore_tilda_equal                                                                      &kp K                     &kp T             &kp N            &kp S      &kp H           &kp P
&mt LC(S) LC(V)      &mt LEFT_SHIFT Z          &kp X            &kp C              &kp V          &quotations_number              &mt LEFT_BRACE LEFT_PARENTHESIS  &mt RIGHT_BRACE RIGHT_PARENTHESIS  &kp G                     &kp D             &kp M            &kp J      &kp B           &mt PIPE SLASH
&mt LC(LS(Z)) LC(Z)  &caps_word                                                                   &mt RCTRL ENTER                 &lt 3 TAB                        &lang_mod                          &lt 2 SPACE               &lt 4 BACKSPACE   &kp RIGHT_SHIFT  &kp RCTRL  &kp RIGHT_ALT   &mt RIGHT_GUI RG(TAB)
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &trans          &trans    &trans          &trans                &trans                    &trans              &trans    &trans          &trans     &trans         &trans
&trans  &trans          &trans    &trans          &trans                &trans                    &trans              &trans    &kp UP_ARROW    &trans     &trans         &trans
&trans  &mkp MB4        &mkp MB5  &mkp MB2        &mkp MB1              &mkp MB3                  &kp LC(LEFT_ARROW)  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &kp LC(RIGHT)  &trans
&trans  &mod_undo_redo  &trans    &mod_undo_redo  &copy_paste_save_cut  &trans    &trans  &trans  &trans              &trans    &trans          &trans     &trans         &trans
&trans  &trans                                                          &trans    &trans  &trans  &trans              &trans    &trans          &trans     &trans         &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans               &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3          &bt BT_SEL 4                                                              &trans        &trans          &trans          &trans     &trans         &bt BT_CLR
&trans               &trans        &trans        &trans          &trans                &trans                                                                    &trans        &kp PAGE_UP     &kp UP_ARROW    &trans     &trans         &trans
&mt LC(LS(S)) LC(S)  &trans        &trans        &mkp MB2        &mkp MB1              &mkp MB3                                                                  &kp LC(LEFT)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp LC(RIGHT)  &trans
&trans               &trans        &trans        &mod_undo_redo  &copy_paste_save_cut  &trans        &mt LESS_THAN LEFT_BRACKET  &mt GREATER_THAN RIGHT_BRACKET  &trans        &kp PAGE_DOWN   &trans          &trans     &trans         &slash_pipe_backslash
&bootloader          &trans                                                            &trans        &trans                      &trans                          &trans        &trans          &trans          &trans     &trans         &bootloader
            >;
        };

        number_layer {
            bindings = <
&trans       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &bt BT_CLR    &trans    &trans          &trans           &trans               &trans
&trans       &trans        &kp N9        &kp N8        &kp N7        &trans                        &trans        &trans    &kp UP_ARROW    &trans           &trans               &trans
&trans       &kp LEFT      &kp NUMBER_6  &kp N5        &kp NUMBER_4  &trans                        &kp LC(LEFT)  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LC(RIGHT_ARROW)  &trans
&trans       &kp N0        &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp DOT       &trans  &trans  &trans        &trans    &trans          &trans           &trans               &trans
&bootloader  &trans                                                  &trans        &trans  &trans  &trans        &trans    &trans          &trans           &trans               &bootloader
            >;

            label = "NUM";
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans    &trans    &trans                                     &trans        &trans        &trans        &trans        &trans      &trans
&trans  &trans  &trans  &trans    &trans    &trans                                     &trans        &kp N7        &kp N8        &kp N9        &trans      &trans
&trans  &trans  &trans  &mkp MB2  &mkp MB1  &mkp MB3                                   &trans        &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans      &trans
&trans  &trans  &trans  &trans    &trans    &trans    &kp LESS_THAN  &kp GREATER_THAN  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &trans
&trans  &trans                              &trans    &trans         &trans            &trans        &trans        &trans        &trans        &trans      &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp LA(LC(DELETE))  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                  &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans              &trans           &trans       &trans    &trans      &trans                       &trans          &trans         &trans            &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans
&trans              &trans           &trans       &trans    &trans      &trans                       &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp RIGHT_BRACE        &trans
&trans              &trans           &trans       &trans    &trans      &trans       &trans  &trans  &kp UNDERSCORE  &kp PLUS       &trans            &kp LESS_THAN         &kp GREATER_THAN       &trans
&trans              &trans                                              &trans       &trans  &trans  &trans          &trans         &trans            &trans                &trans                 &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&kp LS(LC(LA(DEL)))  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&trans               &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans   &trans
&trans               &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans   &trans
&trans               &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans
&trans               &trans                          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans
            >;
        };

        CG2D {
            bindings = <
&trans  &trans          &trans               &kp F3              &trans    &trans                                 &trans  &trans  &trans  &trans  &trans  &trans
&trans  &mt E X         &mt LC(T) V          &kp Y               &mt Y F   &kp C                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &mt E X         &mkp MB3             &mt LEFT_ALT LC(Z)  &mkp MB4  &mkp MB1                               &trans  &trans  &trans  &trans  &trans  &trans
&trans  &mt LEFT_ALT I  &editor_2D_selectio  &mt N P             &mt A B   &kp LEFT_SHIFT  &kp LC(COMMA)  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(O)                                                          &mt SPACE B     &to 0          &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        CG2D_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
